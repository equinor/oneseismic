package server

import (
	"fmt"

	_ "github.com/equinor/oneseismic/api/docs" // docs is generated by Swag CLI, you have to import it.
	l "github.com/equinor/oneseismic/api/logger"
	"github.com/equinor/oneseismic/api/middleware"
	claimsmiddleware "github.com/equinor/oneseismic/api/middleware/claims"
	"github.com/iris-contrib/swagger/v12"
	"github.com/iris-contrib/swagger/v12/swaggerFiles"
	"github.com/kataras/iris/v12"
)

type HTTPServer struct {
	manifestController *manifestController
	app                *iris.Application
	hostAddr           string
	profile            bool
}

func Create(c Config) (*HTTPServer, error) {
	app := iris.Default()
	app.Logger().SetPrefix("iris: ")
	l.AddGoLogSource(app.Logger().SetOutput)
	app.Use(iris.Gzip)
	sURL, err := NewServiceURL(c.AzureBlobSettings)
	if err != nil {
		return nil, fmt.Errorf("creating ServiceURL: %w", err)
	}

	auth, _ := middleware.Oauth2(c.OAuth2Option)
	app.Use(auth)

	claimsHandler := claimsmiddleware.New(c.OAuth2Option.Audience, c.OAuth2Option.Issuer)
	app.Use(claimsHandler.Validate)

	middleware.EnablePrometheusMiddleware(app)

	hs := HTTPServer{
		manifestController: &manifestController{sURL},
		app:                app,
		hostAddr:           c.HostAddr}

	return &hs, nil
}

func Configure(hs *HTTPServer) {
	hs.registerEndpoints()
}

func (hs *HTTPServer) registerEndpoints() {
	hs.app.Get("/", hs.manifestController.list)
}

func (hs *HTTPServer) Serve() error {
	config := &swagger.Config{
		URL: fmt.Sprintf("http://%s/swagger/doc.json", hs.hostAddr), //The url pointing to API definition
	}
	// use swagger middleware to
	hs.app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(config, swaggerFiles.Handler))

	if hs.profile {
		middleware.ServeMetrics("8081")
	}

	return hs.app.Run(iris.Addr(hs.hostAddr))
}
