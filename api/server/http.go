package server

import (
	"fmt"
	"net/http"
	pprof "net/http/pprof"
	"net/url"
	"regexp"

	"github.com/equinor/seismic-cloud/api/controller"

	jwt "github.com/dgrijalva/jwt-go"
	_ "github.com/equinor/seismic-cloud/api/docs" // docs is generated by Swag CLI, you have to import it.
	l "github.com/equinor/seismic-cloud/api/logger"
	claimsmiddleware "github.com/equinor/seismic-cloud/api/middleware/claims"
	"github.com/equinor/seismic-cloud/api/service"
	"github.com/equinor/seismic-cloud/api/service/store"
	jwtmiddleware "github.com/iris-contrib/middleware/jwt"
	prometheusmiddleware "github.com/iris-contrib/middleware/prometheus"
	"github.com/iris-contrib/swagger"
	"github.com/iris-contrib/swagger/swaggerFiles"
	"github.com/kataras/iris"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

type serverMode int

func (sm serverMode) String() string {
	switch sm {
	case NONE:
		return "None"
	case INSECURE:
		return "Insecure"
	case SECURE:
		return "Lets Encrypt"
	case LETSENCRYPT:
		return "Secure"
	default:
		return "Unknown"
	}

}

const (
	NONE serverMode = iota
	INSECURE
	SECURE
	LETSENCRYPT
)

type HTTPServer struct {
	service     APIService
	stitchCmd   []string
	app         *iris.Application
	hostAddr    string
	chosenMode  serverMode
	domains     string
	domainmail  string
	privKeyFile string
	certFile    string
	profile     bool
	addSwagger  bool
}

type APIService struct {
	manifestStore store.ManifestStore
	surfaceStore  store.SurfaceStore
	stitcher      service.Stitcher
}

type HTTPServerOption interface {
	apply(*HTTPServer) error
}

func DefaultHTTPServer() *HTTPServer {

	app := iris.Default()
	app.Logger().SetPrefix("iris: ")
	l.AddGoLogSource(app.Logger().SetOutput)
	return &HTTPServer{
		app:      app,
		hostAddr: "localhost:8080"}
}

func NewHTTPServer(opts ...HTTPServerOption) (hs *HTTPServer, err error) {
	hs = DefaultHTTPServer()
	for _, opt := range opts {
		err = opt.apply(hs)
		if err != nil {
			return nil, fmt.Errorf("Applying config failed: %v", err)
		}
	}
	hs.app.Use(iris.Gzip)

	if hs.service.manifestStore == nil {
		return nil, fmt.Errorf("Server cannot start, no manifest store set")
	}

	if hs.service.stitcher == nil {
		return nil, fmt.Errorf("Server cannot start, stitch command is empty")
	}

	if hs.service.surfaceStore == nil {
		return nil, fmt.Errorf("Server cannot start, no surface store set")
	}

	return hs, nil
}

func WithOAuth2(authServer *url.URL, audience, issuer string) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) error {
		sigKeySet, err := service.GetKeySet(authServer)
		if err != nil {
			return fmt.Errorf("Couldn't get keyset: %v", err)
		}

		jwtHandler := jwtmiddleware.New(jwtmiddleware.Config{
			ValidationKeyGetter: func(t *jwt.Token) (interface{}, error) {
				if t.Method.Alg() != "RS256" {
					return nil, fmt.Errorf("unexpected jwt signing method=%v", t.Header["alg"])
				}
				return sigKeySet[t.Header["kid"].(string)], nil
			},

			SigningMethod: jwt.SigningMethodRS256,
		})

		if len(issuer) == 0 {
			issuer = authServer.String()
		}

		claimsHandler := claimsmiddleware.New(audience, issuer)

		hs.app.Use(jwtHandler.Serve)
		hs.app.Use(claimsHandler.Validate)
		return nil
	})
}

func (hs *HTTPServer) registerMacros() {
	manifestIDExpr := "^[a-zA-Z0-9\\-]{1,40}$"
	manifestIDRegex, err := regexp.Compile(manifestIDExpr)
	if err != nil {
		panic(err)
	}

	hs.app.Macros().Get("string").RegisterFunc("idString", manifestIDRegex.MatchString)
}

func (hs *HTTPServer) registerEndpoints() {

	sc := controller.NewSurfaceController(hs.service.surfaceStore)

	hs.app.Post("/surface/{surfaceID:string idString() else 502}", sc.Upload)
	hs.app.Get("/surface/{surfaceID:string idString() else 502}", sc.Download)
	hs.app.Get("/surface", sc.List)
	hs.app.Get("/", func(ctx iris.Context) {
		ctx.HTML("Seismic cloud API v0.1.0")
	})

	mc := controller.NewManifestController(hs.service.manifestStore)

	hs.app.Get("/manifest", mc.List)
	hs.app.Get("/manifest/{manifestID:string idString() else 502}", mc.Fetch)

	hs.app.Post("/stitch/{manifestID:string idString() else 502}",
		controller.StitchController(
			hs.service.manifestStore,
			hs.service.stitcher))

	hs.app.Get("/stitch/{manifestID:string idString() else 502}/{surfaceID: string idString() else 502}",
		controller.StitchSurfaceController(
			hs.service.manifestStore,
			hs.service.surfaceStore,
			hs.service.stitcher))

}

func (hs *HTTPServer) Serve() error {
	hs.registerMacros()
	hs.registerEndpoints()

	protocolPrefix := "http"
	if hs.chosenMode != INSECURE {
		protocolPrefix += "s"
	}
	if hs.addSwagger {
		config := &swagger.Config{
			URL: fmt.Sprintf("%s://%s/swagger/doc.json", protocolPrefix, hs.hostAddr), //The url pointing to API definition
		}
		// use swagger middleware to
		hs.app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(config, swaggerFiles.Handler))
	}

	if hs.profile {
		// Activate Prometheus middleware if profiling is on
		metrics := iris.New()
		metrics.Get("/metrics", iris.FromStd(promhttp.Handler()))
		metrics.Get("/debug/pprof", iris.FromStd(pprof.Index))
		metrics.Get("/debug/pprof/cmdline", iris.FromStd(pprof.Cmdline))
		metrics.Get("/debug/pprof/profile", iris.FromStd(pprof.Profile))
		metrics.Get("/debug/pprof/symbol", iris.FromStd(pprof.Symbol))

		metrics.Get("/debug/pprof/goroutine", iris.FromStd(pprof.Handler("goroutine")))
		metrics.Get("/debug/pprof/heap", iris.FromStd(pprof.Handler("heap")))
		metrics.Get("/debug/pprof/threadcreate", iris.FromStd(pprof.Handler("threadcreate")))
		metrics.Get("/debug/pprof/block", iris.FromStd(pprof.Handler("block")))

		err := metrics.Build()
		if err != nil {
			panic(err)
		}
		metricsServer := &http.Server{Addr: ":8081", Handler: metrics}

		go func() {
			err := metricsServer.ListenAndServe()
			if err != nil {
				l.LogE("http.RunningProfileServer", "Server shutdown", err)
			}
		}()
	}

	switch hs.chosenMode {
	case INSECURE:
		return hs.app.Run(iris.Addr(hs.hostAddr))
	case LETSENCRYPT:
		return hs.app.Run(iris.AutoTLS(hs.hostAddr, hs.domains, hs.domainmail))
	case SECURE:
		return hs.app.Run(iris.TLS(hs.hostAddr, hs.certFile, hs.privKeyFile))
	default:
		return fmt.Errorf("no http server mode chosen")
	}
}

func WithManifestStore(manifestStore store.ManifestStore) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		hs.service.manifestStore = manifestStore
		return
	})
}

func WithSurfaceStore(surfaceStore store.SurfaceStore) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		hs.service.surfaceStore = surfaceStore
		return
	})
}

func WithHostAddr(hostAddr string) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		hs.hostAddr = hostAddr
		return
	})
}

func WithHTTPOnly() HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		hs.chosenMode = INSECURE
		return
	})
}

func WithTLS(certFile, keyFile string) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {

		if len(certFile) == 0 {
			return fmt.Errorf("No cert file selected for TLS")
		}

		if len(keyFile) == 0 {
			return fmt.Errorf("No key file selected for TLS")
		}
		hs.chosenMode = SECURE
		hs.certFile = certFile
		hs.privKeyFile = keyFile
		return
	})
}
func WithLetsEncrypt(domains, domainmail string) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		if len(domains) == 0 {
			return fmt.Errorf("No domains selected for LetsEncrypt")
		}

		if len(domainmail) == 0 {
			return fmt.Errorf("No domain mail selected for LetsEncrypt")
		}
		hs.chosenMode = LETSENCRYPT
		hs.domains = domains
		hs.domainmail = domainmail
		return
	})
}

func WithProfiling() HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		hs.profile = true

		m := prometheusmiddleware.New("Metrics", 0.3, 1.2, 5.0)
		hs.app.Use(m.ServeHTTP)
		return
	})
}

func WithSwagger() HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {

		hs.addSwagger = true
		return
	})
}

func WithStitcher(stitcher service.Stitcher) HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {

		hs.service.stitcher = stitcher
		return
	})
}
