package server

import (
	"fmt"

	_ "github.com/equinor/oneseismic/api/docs" // docs is generated by Swag CLI, you have to import it.
	l "github.com/equinor/oneseismic/api/logger"
	"github.com/equinor/oneseismic/api/middleware"
	claimsmiddleware "github.com/equinor/oneseismic/api/middleware/claims" // docs is generated by Swag CLI, you have to import it.
	"github.com/iris-contrib/swagger/v12"
	"github.com/iris-contrib/swagger/v12/swaggerFiles"
	"github.com/kataras/iris/v12"
)

type HTTPServer struct {
	manifestController *manifestController
	app                *iris.Application
	hostAddr           string
	profile            bool
}

func Create(sURL manifestStore, c *Config) (*HTTPServer, error) {
	app := iris.Default()
	app.Logger().SetPrefix("iris: ")
	l.AddGoLogSource(app.Logger().SetOutput)

	auth, err := middleware.Oauth2(c.OAuth2Option)
	if err != nil {
		return nil, fmt.Errorf("could not create auth: %w", err)
	}
	app.Use(auth)

	claimsHandler := claimsmiddleware.New(c.OAuth2Option.Audience, c.OAuth2Option.Issuer)
	app.Use(claimsHandler.Validate)

	app.Use(iris.Gzip)

	hs := HTTPServer{
		app:                app,
		manifestController: &manifestController{sURL},
		profile:            c.Profiling,
		hostAddr:           c.HostAddr,
	}
	return &hs, nil
}

func (hs *HTTPServer) RegisterEndpoints() {
	hs.app.Get("/", hs.manifestController.list)
}

func (hs *HTTPServer) Serve() error {
	hs.app.Get("/swagger/{any:path}", swagger.WrapHandler(swaggerFiles.Handler))

	if hs.profile {
		servePrometheus(hs)
		serveMetrics()

	}

	return hs.app.Run(iris.Addr(hs.hostAddr))
}
