package server

import (
	"fmt"
	"log"

	_ "github.com/equinor/oneseismic/api/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/equinor/oneseismic/api/events"
	l "github.com/equinor/oneseismic/api/logger"
	"github.com/equinor/oneseismic/api/middleware"
	claimsmiddleware "github.com/equinor/oneseismic/api/middleware/claims"
	"github.com/iris-contrib/swagger/v12"
	"github.com/iris-contrib/swagger/v12/swaggerFiles"
	"github.com/kataras/iris/v12"
	"github.com/pkg/profile"
	jww "github.com/spf13/jwalterweatherman"
)

func setupLog(app *iris.Application, LogDBConnStr string) error {
	app.Logger().SetPrefix("iris: ")
	jww.SetStdoutThreshold(jww.LevelFatal)
	log.SetPrefix("[INFO] ")
	l.AddGoLogSource(app.Logger().SetOutput)

	if len(LogDBConnStr) > 0 {
		l.LogI("switch log sink from os.Stdout to psqlDB")

		err := l.SetLogSink(l.ConnString(LogDBConnStr), events.DebugLevel)
		if err != nil {
			return fmt.Errorf("switching log sink: %w", err)
		}
	}

	return nil
}

func Serve(m map[string]string) error {
	c, err := ParseConfig(m)
	if err != nil {
		return err
	}

	var p *profile.Profile

	if c.profiling {
		pOpts := []func(*profile.Profile){
			profile.ProfilePath("pprof"),
			profile.NoShutdownHook,
		}

		pOpts = append(pOpts, profile.MemProfile)
		p = profile.Start(pOpts...).(*profile.Profile)

		defer p.Stop()
	}

	app := iris.Default()
	err = setupLog(app, c.logDBConnStr)
	if err != nil {
		return fmt.Errorf("could not setup log: %w", err)
	}

	app.Use(iris.Gzip)

	auth, _ := middleware.Oauth2(c.oAuth2Option)
	app.Use(auth)

	claimsHandler := claimsmiddleware.New(c.oAuth2Option.Audience, c.oAuth2Option.Issuer)
	app.Use(claimsHandler.Validate)

	middleware.EnablePrometheusMiddleware(app)

	sURL, err := NewServiceURL(c.azureBlobSettings)
	if err != nil {
		return fmt.Errorf("creating ServiceURL: %w", err)
	}
	mc := &manifestController{sURL}
	app.Get("/", mc.list)

	app.Get("/swagger/{any:path}", swagger.WrapHandler(swaggerFiles.Handler))

	if c.profiling {
		middleware.ServeMetrics("8081")
	}

	return app.Run(iris.Addr(c.hostAddr))
}
