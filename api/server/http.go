package server

import (
	"fmt"
	"net/http"
	pprof "net/http/pprof"

	_ "github.com/equinor/oneseismic/api/docs" // docs is generated by Swag CLI, you have to import it.
	l "github.com/equinor/oneseismic/api/logger"
	"github.com/equinor/oneseismic/api/middleware"
	claimsmiddleware "github.com/equinor/oneseismic/api/middleware/claims"
	prometheusmiddleware "github.com/iris-contrib/middleware/prometheus"
	"github.com/iris-contrib/swagger/v12"
	"github.com/iris-contrib/swagger/v12/swaggerFiles"
	"github.com/kataras/iris/v12"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

type HTTPServer struct {
	manifestController *manifestController
	app                *iris.Application
	hostAddr           string
	profile            bool
}

type HTTPServerOption interface {
	apply(*HTTPServer) error
}

func Create(c Config) (*HTTPServer, error) {
	app := iris.Default()
	app.Logger().SetPrefix("iris: ")
	l.AddGoLogSource(app.Logger().SetOutput)

	sURL, err := NewServiceURL(c.AzureBlobSettings)
	if err != nil {
		return nil, fmt.Errorf("creating ServiceURL: %w", err)
	}

	hs := HTTPServer{
		manifestController: &manifestController{sURL},
		app:                app,
		hostAddr:           c.HostAddr}

	auth, _ := middleware.Oauth2(c.OAuth2Option)
	hs.app.Use(auth)

	claimsHandler := claimsmiddleware.New(c.OAuth2Option.Audience, c.OAuth2Option.Issuer)
	hs.app.Use(claimsHandler.Validate)

	return &hs, nil
}

func Configure(hs *HTTPServer, opts ...HTTPServerOption) error {
	for _, opt := range opts {
		err := opt.apply(hs)
		if err != nil {
			return fmt.Errorf("Applying config failed: %v", err)
		}
	}

	hs.app.Use(iris.Gzip)
	hs.registerEndpoints()

	return nil
}

func (hs *HTTPServer) registerEndpoints() {
	hs.app.Get("/", hs.manifestController.list)
}

func (hs *HTTPServer) Serve() error {
	config := &swagger.Config{
		URL: fmt.Sprintf("http://%s/swagger/doc.json", hs.hostAddr), //The url pointing to API definition
	}
	// use swagger middleware to
	hs.app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(config, swaggerFiles.Handler))

	if hs.profile {
		// Activate Prometheus middleware if profiling is on
		metrics := iris.Default()

		l.AddGoLogSource(metrics.Logger().SetOutput)
		metrics.Get("/metrics", iris.FromStd(promhttp.Handler()))
		metrics.Get("/debug/pprof", iris.FromStd(pprof.Index))
		metrics.Get("/debug/pprof/cmdline", iris.FromStd(pprof.Cmdline))
		metrics.Get("/debug/pprof/profile", iris.FromStd(pprof.Profile))
		metrics.Get("/debug/pprof/symbol", iris.FromStd(pprof.Symbol))

		metrics.Get("/debug/pprof/goroutine", iris.FromStd(pprof.Handler("goroutine")))
		metrics.Get("/debug/pprof/heap", iris.FromStd(pprof.Handler("heap")))
		metrics.Get("/debug/pprof/threadcreate", iris.FromStd(pprof.Handler("threadcreate")))
		metrics.Get("/debug/pprof/block", iris.FromStd(pprof.Handler("block")))

		err := metrics.Build()
		if err != nil {
			panic(err)
		}
		metricsServer := &http.Server{Addr: ":8081", Handler: metrics}

		go func() {
			err := metricsServer.ListenAndServe()
			if err != nil {
				l.LogE("Server shutdown", err)
			}
		}()
	}

	return hs.app.Run(iris.Addr(hs.hostAddr))
}

func WithProfiling() HTTPServerOption {

	return newFuncOption(func(hs *HTTPServer) (err error) {
		hs.profile = true

		m := prometheusmiddleware.New("Metrics", 0.3, 1.2, 5.0)
		hs.app.Use(m.ServeHTTP)
		hs.app.OnAnyErrorCode(func(ctx iris.Context) {
			// error code handlers are not sharing the same middleware as other routes, so we have
			// to call them inside their body.
			m.ServeHTTP(ctx)

		})
		return
	})
}
