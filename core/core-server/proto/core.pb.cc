// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_core_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SurfaceValue_core_2eproto;
namespace seismic_core {
class SurfaceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceRequest> _instance;
} _SurfaceRequest_default_instance_;
class SurfaceValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceValue> _instance;
} _SurfaceValue_default_instance_;
class SurfaceReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceReply> _instance;
} _SurfaceReply_default_instance_;
class ShatterLinkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShatterLinkRequest> _instance;
} _ShatterLinkRequest_default_instance_;
class ShatterReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShatterReply> _instance;
} _ShatterReply_default_instance_;
}  // namespace seismic_core
static void InitDefaultsSurfaceRequest_core_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seismic_core::_SurfaceRequest_default_instance_;
    new (ptr) ::seismic_core::SurfaceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::seismic_core::SurfaceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SurfaceRequest_core_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSurfaceRequest_core_2eproto}, {}};

static void InitDefaultsSurfaceValue_core_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seismic_core::_SurfaceValue_default_instance_;
    new (ptr) ::seismic_core::SurfaceValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::seismic_core::SurfaceValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SurfaceValue_core_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSurfaceValue_core_2eproto}, {}};

static void InitDefaultsSurfaceReply_core_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seismic_core::_SurfaceReply_default_instance_;
    new (ptr) ::seismic_core::SurfaceReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::seismic_core::SurfaceReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SurfaceReply_core_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSurfaceReply_core_2eproto}, {
      &scc_info_SurfaceValue_core_2eproto.base,}};

static void InitDefaultsShatterLinkRequest_core_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seismic_core::_ShatterLinkRequest_default_instance_;
    new (ptr) ::seismic_core::ShatterLinkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::seismic_core::ShatterLinkRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShatterLinkRequest_core_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShatterLinkRequest_core_2eproto}, {}};

static void InitDefaultsShatterReply_core_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seismic_core::_ShatterReply_default_instance_;
    new (ptr) ::seismic_core::ShatterReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::seismic_core::ShatterReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShatterReply_core_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShatterReply_core_2eproto}, {}};

void InitDefaults_core_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceRequest_core_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceValue_core_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceReply_core_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShatterLinkRequest_core_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShatterReply_core_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_core_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_core_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_core_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_core_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, surface_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, basename_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, cubexs_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, cubeys_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, cubezs_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, fragmentxs_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, fragmentys_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceRequest, fragmentzs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceValue, i_),
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceValue, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seismic_core::SurfaceReply, surface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seismic_core::ShatterLinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seismic_core::ShatterLinkRequest, link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seismic_core::ShatterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seismic_core::ShatterReply, link_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::seismic_core::SurfaceRequest)},
  { 13, -1, sizeof(::seismic_core::SurfaceValue)},
  { 20, -1, sizeof(::seismic_core::SurfaceReply)},
  { 26, -1, sizeof(::seismic_core::ShatterLinkRequest)},
  { 32, -1, sizeof(::seismic_core::ShatterReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::seismic_core::_SurfaceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::seismic_core::_SurfaceValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::seismic_core::_SurfaceReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::seismic_core::_ShatterLinkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::seismic_core::_ShatterReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_core_2eproto = {
  {}, AddDescriptors_core_2eproto, "core.proto", schemas,
  file_default_instances, TableStruct_core_2eproto::offsets,
  file_level_metadata_core_2eproto, 5, file_level_enum_descriptors_core_2eproto, file_level_service_descriptors_core_2eproto,
};

const char descriptor_table_protodef_core_2eproto[] =
  "\n\ncore.proto\022\014seismic_core\"\237\001\n\016SurfaceRe"
  "quest\022\017\n\007surface\030\001 \001(\t\022\020\n\010basename\030\002 \001(\t"
  "\022\016\n\006cubexs\030\003 \001(\005\022\016\n\006cubeys\030\004 \001(\005\022\016\n\006cube"
  "zs\030\005 \001(\005\022\022\n\nfragmentxs\030\006 \001(\005\022\022\n\nfragment"
  "ys\030\007 \001(\005\022\022\n\nfragmentzs\030\010 \001(\005\"$\n\014SurfaceV"
  "alue\022\t\n\001i\030\001 \001(\003\022\t\n\001v\030\002 \001(\001\";\n\014SurfaceRep"
  "ly\022+\n\007surface\030\001 \003(\0132\032.seismic_core.Surfa"
  "ceValue\"\"\n\022ShatterLinkRequest\022\014\n\004link\030\001 "
  "\001(\t\"\034\n\014ShatterReply\022\014\n\004link\030\001 \001(\t2\242\001\n\004Co"
  "re\022M\n\013ShatterLink\022 .seismic_core.Shatter"
  "LinkRequest\032\032.seismic_core.ShatterReply\""
  "\000\022K\n\rStitchSurface\022\034.seismic_core.Surfac"
  "eRequest\032\032.seismic_core.SurfaceReply\"\000b\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_core_2eproto = {
  false, InitDefaults_core_2eproto, 
  descriptor_table_protodef_core_2eproto,
  "core.proto", &assign_descriptors_table_core_2eproto, 526,
};

void AddDescriptors_core_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_core_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2eproto = []() { AddDescriptors_core_2eproto(); return true; }();
namespace seismic_core {

// ===================================================================

void SurfaceRequest::InitAsDefaultInstance() {
}
class SurfaceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceRequest::kSurfaceFieldNumber;
const int SurfaceRequest::kBasenameFieldNumber;
const int SurfaceRequest::kCubexsFieldNumber;
const int SurfaceRequest::kCubeysFieldNumber;
const int SurfaceRequest::kCubezsFieldNumber;
const int SurfaceRequest::kFragmentxsFieldNumber;
const int SurfaceRequest::kFragmentysFieldNumber;
const int SurfaceRequest::kFragmentzsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceRequest::SurfaceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seismic_core.SurfaceRequest)
}
SurfaceRequest::SurfaceRequest(const SurfaceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  surface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.surface().size() > 0) {
    surface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surface_);
  }
  basename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basename().size() > 0) {
    basename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basename_);
  }
  ::memcpy(&cubexs_, &from.cubexs_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragmentzs_) -
    reinterpret_cast<char*>(&cubexs_)) + sizeof(fragmentzs_));
  // @@protoc_insertion_point(copy_constructor:seismic_core.SurfaceRequest)
}

void SurfaceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SurfaceRequest_core_2eproto.base);
  surface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cubexs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentzs_) -
      reinterpret_cast<char*>(&cubexs_)) + sizeof(fragmentzs_));
}

SurfaceRequest::~SurfaceRequest() {
  // @@protoc_insertion_point(destructor:seismic_core.SurfaceRequest)
  SharedDtor();
}

void SurfaceRequest::SharedDtor() {
  surface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SurfaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceRequest& SurfaceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SurfaceRequest_core_2eproto.base);
  return *internal_default_instance();
}


void SurfaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seismic_core.SurfaceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cubexs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentzs_) -
      reinterpret_cast<char*>(&cubexs_)) + sizeof(fragmentzs_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SurfaceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string surface = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("seismic_core.SurfaceRequest.surface");
        object = msg->mutable_surface();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string basename = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("seismic_core.SurfaceRequest.basename");
        object = msg->mutable_basename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 cubexs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cubexs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cubeys = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cubeys(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cubezs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_cubezs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fragmentxs = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_fragmentxs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fragmentys = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_fragmentys(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 fragmentzs = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_fragmentzs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seismic_core.SurfaceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string surface = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->surface().data(), static_cast<int>(this->surface().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seismic_core.SurfaceRequest.surface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string basename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basename().data(), static_cast<int>(this->basename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seismic_core.SurfaceRequest.basename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cubexs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cubexs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cubeys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cubeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cubezs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cubezs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fragmentxs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentxs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fragmentys = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fragmentzs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentzs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seismic_core.SurfaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seismic_core.SurfaceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seismic_core.SurfaceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string surface = 1;
  if (this->surface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->surface().data(), static_cast<int>(this->surface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.SurfaceRequest.surface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->surface(), output);
  }

  // string basename = 2;
  if (this->basename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basename().data(), static_cast<int>(this->basename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.SurfaceRequest.basename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->basename(), output);
  }

  // int32 cubexs = 3;
  if (this->cubexs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cubexs(), output);
  }

  // int32 cubeys = 4;
  if (this->cubeys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cubeys(), output);
  }

  // int32 cubezs = 5;
  if (this->cubezs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cubezs(), output);
  }

  // int32 fragmentxs = 6;
  if (this->fragmentxs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fragmentxs(), output);
  }

  // int32 fragmentys = 7;
  if (this->fragmentys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fragmentys(), output);
  }

  // int32 fragmentzs = 8;
  if (this->fragmentzs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fragmentzs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seismic_core.SurfaceRequest)
}

::google::protobuf::uint8* SurfaceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seismic_core.SurfaceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string surface = 1;
  if (this->surface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->surface().data(), static_cast<int>(this->surface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.SurfaceRequest.surface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surface(), target);
  }

  // string basename = 2;
  if (this->basename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basename().data(), static_cast<int>(this->basename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.SurfaceRequest.basename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->basename(), target);
  }

  // int32 cubexs = 3;
  if (this->cubexs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cubexs(), target);
  }

  // int32 cubeys = 4;
  if (this->cubeys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cubeys(), target);
  }

  // int32 cubezs = 5;
  if (this->cubezs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cubezs(), target);
  }

  // int32 fragmentxs = 6;
  if (this->fragmentxs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fragmentxs(), target);
  }

  // int32 fragmentys = 7;
  if (this->fragmentys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fragmentys(), target);
  }

  // int32 fragmentzs = 8;
  if (this->fragmentzs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fragmentzs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seismic_core.SurfaceRequest)
  return target;
}

size_t SurfaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seismic_core.SurfaceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string surface = 1;
  if (this->surface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->surface());
  }

  // string basename = 2;
  if (this->basename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basename());
  }

  // int32 cubexs = 3;
  if (this->cubexs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cubexs());
  }

  // int32 cubeys = 4;
  if (this->cubeys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cubeys());
  }

  // int32 cubezs = 5;
  if (this->cubezs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cubezs());
  }

  // int32 fragmentxs = 6;
  if (this->fragmentxs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fragmentxs());
  }

  // int32 fragmentys = 7;
  if (this->fragmentys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fragmentys());
  }

  // int32 fragmentzs = 8;
  if (this->fragmentzs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fragmentzs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seismic_core.SurfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SurfaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seismic_core.SurfaceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seismic_core.SurfaceRequest)
    MergeFrom(*source);
  }
}

void SurfaceRequest::MergeFrom(const SurfaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seismic_core.SurfaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.surface().size() > 0) {

    surface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surface_);
  }
  if (from.basename().size() > 0) {

    basename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basename_);
  }
  if (from.cubexs() != 0) {
    set_cubexs(from.cubexs());
  }
  if (from.cubeys() != 0) {
    set_cubeys(from.cubeys());
  }
  if (from.cubezs() != 0) {
    set_cubezs(from.cubezs());
  }
  if (from.fragmentxs() != 0) {
    set_fragmentxs(from.fragmentxs());
  }
  if (from.fragmentys() != 0) {
    set_fragmentys(from.fragmentys());
  }
  if (from.fragmentzs() != 0) {
    set_fragmentzs(from.fragmentzs());
  }
}

void SurfaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seismic_core.SurfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceRequest::CopyFrom(const SurfaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seismic_core.SurfaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceRequest::IsInitialized() const {
  return true;
}

void SurfaceRequest::Swap(SurfaceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurfaceRequest::InternalSwap(SurfaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  surface_.Swap(&other->surface_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basename_.Swap(&other->basename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cubexs_, other->cubexs_);
  swap(cubeys_, other->cubeys_);
  swap(cubezs_, other->cubezs_);
  swap(fragmentxs_, other->fragmentxs_);
  swap(fragmentys_, other->fragmentys_);
  swap(fragmentzs_, other->fragmentzs_);
}

::google::protobuf::Metadata SurfaceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2eproto);
  return ::file_level_metadata_core_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SurfaceValue::InitAsDefaultInstance() {
}
class SurfaceValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceValue::kIFieldNumber;
const int SurfaceValue::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceValue::SurfaceValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seismic_core.SurfaceValue)
}
SurfaceValue::SurfaceValue(const SurfaceValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&i_, &from.i_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&i_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:seismic_core.SurfaceValue)
}

void SurfaceValue::SharedCtor() {
  ::memset(&i_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&i_)) + sizeof(v_));
}

SurfaceValue::~SurfaceValue() {
  // @@protoc_insertion_point(destructor:seismic_core.SurfaceValue)
  SharedDtor();
}

void SurfaceValue::SharedDtor() {
}

void SurfaceValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceValue& SurfaceValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SurfaceValue_core_2eproto.base);
  return *internal_default_instance();
}


void SurfaceValue::Clear() {
// @@protoc_insertion_point(message_clear_start:seismic_core.SurfaceValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&i_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&i_)) + sizeof(v_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SurfaceValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 i = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_i(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double v = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_v(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seismic_core.SurfaceValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 i = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seismic_core.SurfaceValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seismic_core.SurfaceValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seismic_core.SurfaceValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 i = 1;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->i(), output);
  }

  // double v = 2;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seismic_core.SurfaceValue)
}

::google::protobuf::uint8* SurfaceValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seismic_core.SurfaceValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 i = 1;
  if (this->i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->i(), target);
  }

  // double v = 2;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seismic_core.SurfaceValue)
  return target;
}

size_t SurfaceValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seismic_core.SurfaceValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 i = 1;
  if (this->i() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->i());
  }

  // double v = 2;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seismic_core.SurfaceValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceValue* source =
      ::google::protobuf::DynamicCastToGenerated<SurfaceValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seismic_core.SurfaceValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seismic_core.SurfaceValue)
    MergeFrom(*source);
  }
}

void SurfaceValue::MergeFrom(const SurfaceValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seismic_core.SurfaceValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.i() != 0) {
    set_i(from.i());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
}

void SurfaceValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seismic_core.SurfaceValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceValue::CopyFrom(const SurfaceValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seismic_core.SurfaceValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceValue::IsInitialized() const {
  return true;
}

void SurfaceValue::Swap(SurfaceValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurfaceValue::InternalSwap(SurfaceValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(i_, other->i_);
  swap(v_, other->v_);
}

::google::protobuf::Metadata SurfaceValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2eproto);
  return ::file_level_metadata_core_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SurfaceReply::InitAsDefaultInstance() {
}
class SurfaceReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceReply::kSurfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceReply::SurfaceReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seismic_core.SurfaceReply)
}
SurfaceReply::SurfaceReply(const SurfaceReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      surface_(from.surface_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:seismic_core.SurfaceReply)
}

void SurfaceReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SurfaceReply_core_2eproto.base);
}

SurfaceReply::~SurfaceReply() {
  // @@protoc_insertion_point(destructor:seismic_core.SurfaceReply)
  SharedDtor();
}

void SurfaceReply::SharedDtor() {
}

void SurfaceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceReply& SurfaceReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SurfaceReply_core_2eproto.base);
  return *internal_default_instance();
}


void SurfaceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:seismic_core.SurfaceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surface_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SurfaceReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .seismic_core.SurfaceValue surface = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::seismic_core::SurfaceValue::_InternalParse;
          object = msg->add_surface();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seismic_core.SurfaceReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .seismic_core.SurfaceValue surface = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_surface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seismic_core.SurfaceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seismic_core.SurfaceReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seismic_core.SurfaceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .seismic_core.SurfaceValue surface = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->surface(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seismic_core.SurfaceReply)
}

::google::protobuf::uint8* SurfaceReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seismic_core.SurfaceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .seismic_core.SurfaceValue surface = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->surface(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seismic_core.SurfaceReply)
  return target;
}

size_t SurfaceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seismic_core.SurfaceReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .seismic_core.SurfaceValue surface = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->surface_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->surface(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seismic_core.SurfaceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceReply* source =
      ::google::protobuf::DynamicCastToGenerated<SurfaceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seismic_core.SurfaceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seismic_core.SurfaceReply)
    MergeFrom(*source);
  }
}

void SurfaceReply::MergeFrom(const SurfaceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seismic_core.SurfaceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  surface_.MergeFrom(from.surface_);
}

void SurfaceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seismic_core.SurfaceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceReply::CopyFrom(const SurfaceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seismic_core.SurfaceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceReply::IsInitialized() const {
  return true;
}

void SurfaceReply::Swap(SurfaceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurfaceReply::InternalSwap(SurfaceReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&surface_)->InternalSwap(CastToBase(&other->surface_));
}

::google::protobuf::Metadata SurfaceReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2eproto);
  return ::file_level_metadata_core_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ShatterLinkRequest::InitAsDefaultInstance() {
}
class ShatterLinkRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShatterLinkRequest::kLinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShatterLinkRequest::ShatterLinkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seismic_core.ShatterLinkRequest)
}
ShatterLinkRequest::ShatterLinkRequest(const ShatterLinkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link().size() > 0) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  // @@protoc_insertion_point(copy_constructor:seismic_core.ShatterLinkRequest)
}

void ShatterLinkRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ShatterLinkRequest_core_2eproto.base);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ShatterLinkRequest::~ShatterLinkRequest() {
  // @@protoc_insertion_point(destructor:seismic_core.ShatterLinkRequest)
  SharedDtor();
}

void ShatterLinkRequest::SharedDtor() {
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShatterLinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShatterLinkRequest& ShatterLinkRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ShatterLinkRequest_core_2eproto.base);
  return *internal_default_instance();
}


void ShatterLinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seismic_core.ShatterLinkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShatterLinkRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ShatterLinkRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string link = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("seismic_core.ShatterLinkRequest.link");
        object = msg->mutable_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShatterLinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seismic_core.ShatterLinkRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string link = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seismic_core.ShatterLinkRequest.link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seismic_core.ShatterLinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seismic_core.ShatterLinkRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShatterLinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seismic_core.ShatterLinkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link = 1;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.ShatterLinkRequest.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->link(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seismic_core.ShatterLinkRequest)
}

::google::protobuf::uint8* ShatterLinkRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seismic_core.ShatterLinkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link = 1;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.ShatterLinkRequest.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seismic_core.ShatterLinkRequest)
  return target;
}

size_t ShatterLinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seismic_core.ShatterLinkRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link = 1;
  if (this->link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShatterLinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seismic_core.ShatterLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShatterLinkRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ShatterLinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seismic_core.ShatterLinkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seismic_core.ShatterLinkRequest)
    MergeFrom(*source);
  }
}

void ShatterLinkRequest::MergeFrom(const ShatterLinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seismic_core.ShatterLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.link().size() > 0) {

    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
}

void ShatterLinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seismic_core.ShatterLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShatterLinkRequest::CopyFrom(const ShatterLinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seismic_core.ShatterLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShatterLinkRequest::IsInitialized() const {
  return true;
}

void ShatterLinkRequest::Swap(ShatterLinkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShatterLinkRequest::InternalSwap(ShatterLinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  link_.Swap(&other->link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ShatterLinkRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2eproto);
  return ::file_level_metadata_core_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ShatterReply::InitAsDefaultInstance() {
}
class ShatterReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShatterReply::kLinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShatterReply::ShatterReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seismic_core.ShatterReply)
}
ShatterReply::ShatterReply(const ShatterReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link().size() > 0) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  // @@protoc_insertion_point(copy_constructor:seismic_core.ShatterReply)
}

void ShatterReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ShatterReply_core_2eproto.base);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ShatterReply::~ShatterReply() {
  // @@protoc_insertion_point(destructor:seismic_core.ShatterReply)
  SharedDtor();
}

void ShatterReply::SharedDtor() {
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShatterReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShatterReply& ShatterReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ShatterReply_core_2eproto.base);
  return *internal_default_instance();
}


void ShatterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:seismic_core.ShatterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShatterReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ShatterReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string link = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("seismic_core.ShatterReply.link");
        object = msg->mutable_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShatterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seismic_core.ShatterReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string link = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seismic_core.ShatterReply.link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seismic_core.ShatterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seismic_core.ShatterReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShatterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seismic_core.ShatterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link = 1;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.ShatterReply.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->link(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seismic_core.ShatterReply)
}

::google::protobuf::uint8* ShatterReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seismic_core.ShatterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link = 1;
  if (this->link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seismic_core.ShatterReply.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seismic_core.ShatterReply)
  return target;
}

size_t ShatterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seismic_core.ShatterReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link = 1;
  if (this->link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShatterReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seismic_core.ShatterReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ShatterReply* source =
      ::google::protobuf::DynamicCastToGenerated<ShatterReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seismic_core.ShatterReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seismic_core.ShatterReply)
    MergeFrom(*source);
  }
}

void ShatterReply::MergeFrom(const ShatterReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seismic_core.ShatterReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.link().size() > 0) {

    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
}

void ShatterReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seismic_core.ShatterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShatterReply::CopyFrom(const ShatterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seismic_core.ShatterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShatterReply::IsInitialized() const {
  return true;
}

void ShatterReply::Swap(ShatterReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShatterReply::InternalSwap(ShatterReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  link_.Swap(&other->link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ShatterReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2eproto);
  return ::file_level_metadata_core_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace seismic_core
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::seismic_core::SurfaceRequest* Arena::CreateMaybeMessage< ::seismic_core::SurfaceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::seismic_core::SurfaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::seismic_core::SurfaceValue* Arena::CreateMaybeMessage< ::seismic_core::SurfaceValue >(Arena* arena) {
  return Arena::CreateInternal< ::seismic_core::SurfaceValue >(arena);
}
template<> PROTOBUF_NOINLINE ::seismic_core::SurfaceReply* Arena::CreateMaybeMessage< ::seismic_core::SurfaceReply >(Arena* arena) {
  return Arena::CreateInternal< ::seismic_core::SurfaceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::seismic_core::ShatterLinkRequest* Arena::CreateMaybeMessage< ::seismic_core::ShatterLinkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::seismic_core::ShatterLinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::seismic_core::ShatterReply* Arena::CreateMaybeMessage< ::seismic_core::ShatterReply >(Arena* arena) {
  return Arena::CreateInternal< ::seismic_core::ShatterReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
