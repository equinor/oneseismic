// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto

#include "core.pb.h"
#include "core.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace seismic_core {

static const char* Core_method_names[] = {
  "/seismic_core.Core/ShatterLink",
  "/seismic_core.Core/StitchSurface",
};

std::unique_ptr< Core::Stub> Core::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Core::Stub> stub(new Core::Stub(channel));
  return stub;
}

Core::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ShatterLink_(Core_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StitchSurface_(Core_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Core::Stub::ShatterLink(::grpc::ClientContext* context, const ::seismic_core::ShatterLinkRequest& request, ::seismic_core::ShatterReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShatterLink_, context, request, response);
}

void Core::Stub::experimental_async::ShatterLink(::grpc::ClientContext* context, const ::seismic_core::ShatterLinkRequest* request, ::seismic_core::ShatterReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShatterLink_, context, request, response, std::move(f));
}

void Core::Stub::experimental_async::ShatterLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::seismic_core::ShatterReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShatterLink_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::seismic_core::ShatterReply>* Core::Stub::AsyncShatterLinkRaw(::grpc::ClientContext* context, const ::seismic_core::ShatterLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::seismic_core::ShatterReply>::Create(channel_.get(), cq, rpcmethod_ShatterLink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::seismic_core::ShatterReply>* Core::Stub::PrepareAsyncShatterLinkRaw(::grpc::ClientContext* context, const ::seismic_core::ShatterLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::seismic_core::ShatterReply>::Create(channel_.get(), cq, rpcmethod_ShatterLink_, context, request, false);
}

::grpc::Status Core::Stub::StitchSurface(::grpc::ClientContext* context, const ::seismic_core::SurfaceRequest& request, ::seismic_core::SurfaceReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StitchSurface_, context, request, response);
}

void Core::Stub::experimental_async::StitchSurface(::grpc::ClientContext* context, const ::seismic_core::SurfaceRequest* request, ::seismic_core::SurfaceReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StitchSurface_, context, request, response, std::move(f));
}

void Core::Stub::experimental_async::StitchSurface(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::seismic_core::SurfaceReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StitchSurface_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::seismic_core::SurfaceReply>* Core::Stub::AsyncStitchSurfaceRaw(::grpc::ClientContext* context, const ::seismic_core::SurfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::seismic_core::SurfaceReply>::Create(channel_.get(), cq, rpcmethod_StitchSurface_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::seismic_core::SurfaceReply>* Core::Stub::PrepareAsyncStitchSurfaceRaw(::grpc::ClientContext* context, const ::seismic_core::SurfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::seismic_core::SurfaceReply>::Create(channel_.get(), cq, rpcmethod_StitchSurface_, context, request, false);
}

Core::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::seismic_core::ShatterLinkRequest, ::seismic_core::ShatterReply>(
          std::mem_fn(&Core::Service::ShatterLink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::seismic_core::SurfaceRequest, ::seismic_core::SurfaceReply>(
          std::mem_fn(&Core::Service::StitchSurface), this)));
}

Core::Service::~Service() {
}

::grpc::Status Core::Service::ShatterLink(::grpc::ServerContext* context, const ::seismic_core::ShatterLinkRequest* request, ::seismic_core::ShatterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::StitchSurface(::grpc::ServerContext* context, const ::seismic_core::SurfaceRequest* request, ::seismic_core::SurfaceReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace seismic_core

