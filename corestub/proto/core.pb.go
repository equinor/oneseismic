// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

package seismic_core

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SurfaceRequest struct {
	Surface              string   `protobuf:"bytes,1,opt,name=surface,proto3" json:"surface,omitempty"`
	Basename             string   `protobuf:"bytes,2,opt,name=basename,proto3" json:"basename,omitempty"`
	Cubexs               uint32   `protobuf:"varint,3,opt,name=cubexs,proto3" json:"cubexs,omitempty"`
	Cubeys               uint32   `protobuf:"varint,4,opt,name=cubeys,proto3" json:"cubeys,omitempty"`
	Cubezs               uint32   `protobuf:"varint,5,opt,name=cubezs,proto3" json:"cubezs,omitempty"`
	Fragmentxs           uint32   `protobuf:"varint,6,opt,name=fragmentxs,proto3" json:"fragmentxs,omitempty"`
	Fragmentys           uint32   `protobuf:"varint,7,opt,name=fragmentys,proto3" json:"fragmentys,omitempty"`
	Fragmentzs           uint32   `protobuf:"varint,8,opt,name=fragmentzs,proto3" json:"fragmentzs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SurfaceRequest) Reset()         { *m = SurfaceRequest{} }
func (m *SurfaceRequest) String() string { return proto.CompactTextString(m) }
func (*SurfaceRequest) ProtoMessage()    {}
func (*SurfaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{0}
}

func (m *SurfaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurfaceRequest.Unmarshal(m, b)
}
func (m *SurfaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurfaceRequest.Marshal(b, m, deterministic)
}
func (m *SurfaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurfaceRequest.Merge(m, src)
}
func (m *SurfaceRequest) XXX_Size() int {
	return xxx_messageInfo_SurfaceRequest.Size(m)
}
func (m *SurfaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SurfaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SurfaceRequest proto.InternalMessageInfo

func (m *SurfaceRequest) GetSurface() string {
	if m != nil {
		return m.Surface
	}
	return ""
}

func (m *SurfaceRequest) GetBasename() string {
	if m != nil {
		return m.Basename
	}
	return ""
}

func (m *SurfaceRequest) GetCubexs() uint32 {
	if m != nil {
		return m.Cubexs
	}
	return 0
}

func (m *SurfaceRequest) GetCubeys() uint32 {
	if m != nil {
		return m.Cubeys
	}
	return 0
}

func (m *SurfaceRequest) GetCubezs() uint32 {
	if m != nil {
		return m.Cubezs
	}
	return 0
}

func (m *SurfaceRequest) GetFragmentxs() uint32 {
	if m != nil {
		return m.Fragmentxs
	}
	return 0
}

func (m *SurfaceRequest) GetFragmentys() uint32 {
	if m != nil {
		return m.Fragmentys
	}
	return 0
}

func (m *SurfaceRequest) GetFragmentzs() uint32 {
	if m != nil {
		return m.Fragmentzs
	}
	return 0
}

type SurfaceReply struct {
	I                    []uint64  `protobuf:"varint,1,rep,packed,name=i,proto3" json:"i,omitempty"`
	V                    []float32 `protobuf:"fixed32,2,rep,packed,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SurfaceReply) Reset()         { *m = SurfaceReply{} }
func (m *SurfaceReply) String() string { return proto.CompactTextString(m) }
func (*SurfaceReply) ProtoMessage()    {}
func (*SurfaceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{1}
}

func (m *SurfaceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurfaceReply.Unmarshal(m, b)
}
func (m *SurfaceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurfaceReply.Marshal(b, m, deterministic)
}
func (m *SurfaceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurfaceReply.Merge(m, src)
}
func (m *SurfaceReply) XXX_Size() int {
	return xxx_messageInfo_SurfaceReply.Size(m)
}
func (m *SurfaceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SurfaceReply.DiscardUnknown(m)
}

var xxx_messageInfo_SurfaceReply proto.InternalMessageInfo

func (m *SurfaceReply) GetI() []uint64 {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *SurfaceReply) GetV() []float32 {
	if m != nil {
		return m.V
	}
	return nil
}

type ShatterLinkRequest struct {
	Link                 string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShatterLinkRequest) Reset()         { *m = ShatterLinkRequest{} }
func (m *ShatterLinkRequest) String() string { return proto.CompactTextString(m) }
func (*ShatterLinkRequest) ProtoMessage()    {}
func (*ShatterLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{2}
}

func (m *ShatterLinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShatterLinkRequest.Unmarshal(m, b)
}
func (m *ShatterLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShatterLinkRequest.Marshal(b, m, deterministic)
}
func (m *ShatterLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShatterLinkRequest.Merge(m, src)
}
func (m *ShatterLinkRequest) XXX_Size() int {
	return xxx_messageInfo_ShatterLinkRequest.Size(m)
}
func (m *ShatterLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShatterLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShatterLinkRequest proto.InternalMessageInfo

func (m *ShatterLinkRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type ShatterReply struct {
	Link                 string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShatterReply) Reset()         { *m = ShatterReply{} }
func (m *ShatterReply) String() string { return proto.CompactTextString(m) }
func (*ShatterReply) ProtoMessage()    {}
func (*ShatterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{3}
}

func (m *ShatterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShatterReply.Unmarshal(m, b)
}
func (m *ShatterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShatterReply.Marshal(b, m, deterministic)
}
func (m *ShatterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShatterReply.Merge(m, src)
}
func (m *ShatterReply) XXX_Size() int {
	return xxx_messageInfo_ShatterReply.Size(m)
}
func (m *ShatterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShatterReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShatterReply proto.InternalMessageInfo

func (m *ShatterReply) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func init() {
	proto.RegisterType((*SurfaceRequest)(nil), "seismic_core.SurfaceRequest")
	proto.RegisterType((*SurfaceReply)(nil), "seismic_core.SurfaceReply")
	proto.RegisterType((*ShatterLinkRequest)(nil), "seismic_core.ShatterLinkRequest")
	proto.RegisterType((*ShatterReply)(nil), "seismic_core.ShatterReply")
}

func init() { proto.RegisterFile("core.proto", fileDescriptor_f7e43720d1edc0fe) }

var fileDescriptor_f7e43720d1edc0fe = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x4e, 0xb3, 0x40,
	0x14, 0xed, 0x14, 0x3e, 0xda, 0xef, 0x4a, 0x5d, 0xdc, 0x85, 0x99, 0x10, 0x63, 0x9a, 0x59, 0x11,
	0x17, 0x2c, 0xf4, 0x11, 0x5c, 0xaa, 0x1b, 0x78, 0x00, 0x03, 0x64, 0x6a, 0x27, 0x16, 0xa8, 0xcc,
	0xd0, 0x08, 0x8f, 0xe3, 0x03, 0xfa, 0x0c, 0x4e, 0xf9, 0xeb, 0x60, 0xbb, 0xe3, 0xfc, 0xe4, 0x4c,
	0xce, 0xb9, 0x00, 0xa4, 0x45, 0xc9, 0x83, 0x7d, 0x59, 0xa8, 0x02, 0x5d, 0xc9, 0x85, 0xcc, 0x44,
	0xfa, 0x76, 0xe4, 0xd8, 0x0f, 0x81, 0xeb, 0xa8, 0x2a, 0x37, 0x71, 0xca, 0x43, 0xfe, 0x59, 0x71,
	0xa9, 0x90, 0xc2, 0x42, 0x76, 0x0c, 0x25, 0x6b, 0xe2, 0xff, 0x0f, 0x07, 0x88, 0x1e, 0x2c, 0x93,
	0x58, 0xf2, 0x3c, 0xce, 0x38, 0x9d, 0xb7, 0xd2, 0x88, 0xf1, 0x06, 0x9c, 0xb4, 0x4a, 0xf8, 0x97,
	0xa4, 0x96, 0x56, 0x56, 0x61, 0x8f, 0x06, 0xbe, 0x96, 0xd4, 0x3e, 0xf1, 0xf5, 0xc8, 0x37, 0x92,
	0xfe, 0x3b, 0xf1, 0x8d, 0xc4, 0x3b, 0x80, 0x4d, 0x19, 0xbf, 0x67, 0x3c, 0x57, 0x3a, 0xcb, 0x69,
	0x35, 0x83, 0x31, 0x75, 0x9d, 0xb9, 0x98, 0xea, 0xf5, 0x44, 0xd7, 0xd9, 0xcb, 0xa9, 0xde, 0x48,
	0x76, 0x0f, 0xee, 0xd8, 0x77, 0xbf, 0xab, 0xd1, 0x05, 0x22, 0x74, 0x4f, 0xcb, 0xb7, 0x43, 0x22,
	0x8e, 0xe8, 0xa0, 0xab, 0x59, 0xfe, 0x3c, 0x24, 0x07, 0xe6, 0x03, 0x46, 0xdb, 0x58, 0x29, 0x5e,
	0xbe, 0x88, 0xfc, 0x63, 0xd8, 0x07, 0xc1, 0xde, 0x69, 0xd8, 0x8f, 0xd3, 0x7e, 0x33, 0xa6, 0x53,
	0x3b, 0x67, 0x97, 0x7a, 0xc1, 0xf3, 0xf0, 0x4d, 0xc0, 0x7e, 0xd2, 0x9b, 0xe3, 0x2b, 0x5c, 0x19,
	0xb1, 0xb8, 0x0e, 0xcc, 0x8b, 0x04, 0xe7, 0x2f, 0x7a, 0xde, 0x45, 0x47, 0xfb, 0x12, 0x9b, 0xe1,
	0x33, 0xac, 0x22, 0x25, 0x54, 0xba, 0xed, 0x7b, 0xe1, 0xed, 0x1f, 0xfb, 0xe4, 0xbc, 0x67, 0x61,
	0xc6, 0x18, 0x6c, 0x96, 0x38, 0xed, 0x4f, 0xf2, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x63, 0x1a,
	0x75, 0x0c, 0x32, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	ShatterLink(ctx context.Context, in *ShatterLinkRequest, opts ...grpc.CallOption) (*ShatterReply, error)
	StitchSurface(ctx context.Context, in *SurfaceRequest, opts ...grpc.CallOption) (*SurfaceReply, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) ShatterLink(ctx context.Context, in *ShatterLinkRequest, opts ...grpc.CallOption) (*ShatterReply, error) {
	out := new(ShatterReply)
	err := c.cc.Invoke(ctx, "/seismic_core.Core/ShatterLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StitchSurface(ctx context.Context, in *SurfaceRequest, opts ...grpc.CallOption) (*SurfaceReply, error) {
	out := new(SurfaceReply)
	err := c.cc.Invoke(ctx, "/seismic_core.Core/StitchSurface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	ShatterLink(context.Context, *ShatterLinkRequest) (*ShatterReply, error)
	StitchSurface(context.Context, *SurfaceRequest) (*SurfaceReply, error)
}

// UnimplementedCoreServer can be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (*UnimplementedCoreServer) ShatterLink(ctx context.Context, req *ShatterLinkRequest) (*ShatterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShatterLink not implemented")
}
func (*UnimplementedCoreServer) StitchSurface(ctx context.Context, req *SurfaceRequest) (*SurfaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StitchSurface not implemented")
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_ShatterLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShatterLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ShatterLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seismic_core.Core/ShatterLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ShatterLink(ctx, req.(*ShatterLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StitchSurface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StitchSurface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seismic_core.Core/StitchSurface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StitchSurface(ctx, req.(*SurfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seismic_core.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShatterLink",
			Handler:    _Core_ShatterLink_Handler,
		},
		{
			MethodName: "StitchSurface",
			Handler:    _Core_StitchSurface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
