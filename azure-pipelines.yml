trigger:
  - master
  - release

resources:
  containers:
    - container: b1
      image: lambdaville/seismic-cloud-deps:latest

jobs:
  - job: BuildCore
    pool:
      vmImage: 'Ubuntu-16.04'
    container: b1
    steps:
      - script: |
          protoc -I protos --grpc_out=core/core-server/proto --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` protos/core.proto
          protoc -I protos --cpp_out=core/core-server/proto protos/core.proto
      - script: |
          mkdir build
          cd build
          cmake ../core -DCMAKE_BUILD_TYPE=Release
          make
        displayName: 'Build seismic-cloud'
      - script: |
          ctest --output-on-failure
        displayName: 'Test seismic-cloud'
  - job: BuildAPI
    container: b1
    steps:
      - script: |
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$PATH
          go get -u -v github.com/swaggo/swag/cmd/swag
          go get -u -v github.com/jstemmer/go-junit-report
          go get -u -v github.com/axw/gocov/gocov
          go get -u -v github.com/AlekSi/gocov-xml
          go get -u -v github.com/matm/gocov-html
        displayName: Installing Go build dependencies
      - script: |
          protoc -I protos protos/core.proto --go_out=plugins=grpc:api/proto
        displayName: Generating grpc server and client stubs
      - script: |
          $HOME/go/bin/swag init
        displayName: Generate docs
        workingDirectory: api
      - script: |
          GOPATH=$HOME/go go build
        displayName: 'Build seismic-cloud-api'
        workingDirectory: api
      - script: |
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$PATH
          go test -v -coverprofile=coverage.txt -covermode count ./... 2>&1 | go-junit-report > report.xml
          gocov convert coverage.txt > coverage.json
          gocov-xml < coverage.json > coverage.xml
          mkdir -p coverage
          gocov-html < coverage.json > coverage/index.html
        workingDirectory: api
        displayName: 'Run unit test seismic-cloud-api'
      - script: |
          echo 'Deploy'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
        displayName: 'Deploy seismic-cloud'
      - task: PublishTestResults@2
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
          reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
