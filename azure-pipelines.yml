trigger:
  - master
  - release

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  GOBIN:  '$(GOPATH)/bin'
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  # PATH:   '$(GOPATH)/bin:$(PATH)'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'

steps:
  - task: GoTool@0
    inputs:
      version: '1.12.4'
  - script: |
      git clone https://github.com/equinor/segyio
      mkdir -p segyio/build
      cd segyio/build
      cmake .. -DBUILD_PYTHON=OFF -DCMAKE_BUILD_TYPE=Release -DEXPERIMENTAL=ON -DBUILD_TESTING=OFF
      sudo make install
    displayName: 'Build segyio'

  - script: |
      mkdir build
      cd build
      cmake ../core -DCMAKE_BUILD_TYPE=Release
    displayName: 'Setup seismic-cloud'

  - script: |
      make
    displayName: 'Build seismic-cloud'
    workingDirectory: build

  - script: |
      ctest --output-on-failure
    displayName: 'Test seismic-cloud'
    workingDirectory: build

  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      echo '##vso[task.prependpath]$(GOBIN)'
      echo "##vso[task.prependpath]$(GOROOT)/bin"
      'echo export PATH=$GOPATH/bin:$PATH'
      echo $(PATH)
    displayName: 'Set up Go env'

  - script: |
      go get -v -t ./...
      go build
      echo '##vso[task.prependpath]$(GOBIN)'
      echo "##vso[task.prependpath]$(GOROOT)/bin"
      echo $(PATH)
    displayName: 'Build seismic-cloud-api'
    workingDirectory: api

  - script: |
      # go get github.com/jstemmer/go-junit-report
      # go get github.com/axw/gocov/
      # go get github.com/AlekSi/gocov-xml
      # go get github.com/matm/gocov-html
      go test -v -coverprofile=coverage.txt -covermode count ./... 2>&1 | go-junit-report > report.xml
      gocov convert coverage.txt > coverage.json
      gocov-xml < coverage.json > coverage.xml
      mkdir coverage
      gocov-html < coverage.json > coverage/index.html
    workingDirectory: api
    displayName: 'Run unit test seismic-cloud-api'

  - script: |
      echo 'Deploy'
    displayName: 'Deploy seismic-cloud'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))


  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage