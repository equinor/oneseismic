trigger:
  - master
  - release

resources:
  containers:
    - container: b1
      image: lambdaville/go-python:latest

jobs:
  - job: Build_API
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    container: b1
    variables:
      GOPATH: $(Pipeline.Workspace)/go
      # Minimum percentage of code that has to be tested
      COVERAGE_LIMIT: 39
    steps:
      - script: |
          go mod download
        displayName: 'Download modules'
        workingDirectory: api

      - script: |
          protoc -I ../protos ../protos/core.proto --go_out=plugins=grpc:proto
        displayName: 'Generating grpc client stubs'
        workingDirectory: api

      - script: |
          swag init
        displayName: Generate docs
        workingDirectory: api

      - script: |
          go build
        displayName: 'Build seismic-cloud-api'
        workingDirectory: api

      - script: |
          go test -race -v ./...
        workingDirectory: api
        displayName: 'SC-API Run unit tests'

      - template: api/tests/pipeline-tests.yaml

      - script: |
          echo 'Deploy'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
        displayName: 'Deploy seismic-cloud'

      - template: api/tests/publish-test-results.yaml

  - job: docker_push
    steps:
      - script: |
          docker build api
        displayName: 'docker build api'
      - script: |
          docker-compose build
          echo $(ACRPASSWD)|docker login -u lambdaville lambdaville.azurecr.io --password-stdin
          docker-compose push
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'docker-compose build and push'

  - job: Integration_tests
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    steps:
      - script: |
          docker-compose -f tests/docker-compose.yml up --build --exit-code-from test
        displayName: 'Integration_tests'

schedules:
- cron: "* 6 * * *"
  displayName: nightly build
  branches:
    include:
    - master
  always: true
