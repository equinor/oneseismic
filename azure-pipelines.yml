trigger:
  - master
  - release



jobs:
  - job: Build_Core
    steps:
      - script: |
          git clone https://github.com/equinor/segyio
          mkdir -p segyio/build
          cd segyio/build
          cmake .. -DBUILD_PYTHON=OFF -DCMAKE_BUILD_TYPE=Release -DEXPERIMENTAL=ON -DBUILD_TESTING=OFF
          sudo make install
        displayName: 'Build segyio'
      - script: |
          sudo pip install scikit-build pybind11
          mkdir build
          cd build
          cmake ../core -DCMAKE_BUILD_TYPE=Release
        displayName: 'Setup seismic-cloud'

      - script: |
          make
        displayName: 'Build seismic-cloud'

        workingDirectory: build
      - script: |
          ctest --output-on-failure
        displayName: 'Test seismic-cloud'

        workingDirectory: build

  - job: Build_API
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: GoTool@0
        inputs:
          version: '1.12.4'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
      - script: |
          pip install --upgrade pip
          pip install pytest pytest-azurepipelines requests
          go mod download
          go get github.com/jstemmer/go-junit-report
          go get github.com/axw/gocov/gocov
          go get github.com/AlekSi/gocov-xml
          go get github.com/matm/gocov-html
          go get github.com/swaggo/swag/cmd/swag
        workingDirectory: api
        displayName: 'Set up Go env and build dependencies'
      - script: |
          # sudo apt install -y protobuf-compiler
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
          unzip protoc-3.6.1-linux-x86_64.zip -d protoc3
          sudo mv protoc3/bin/* /usr/local/bin/
          sudo mv protoc3/include/* /usr/local/include/

          go get github.com/golang/protobuf/protoc-gen-go
          protoc -I ../protos ../protos/core.proto --go_out=plugins=grpc:proto
        displayName: 'Generating grpc client stubs'
        workingDirectory: api
      - script: |
          swag init
        displayName: Generate docs
        workingDirectory: api
      - script: |
          go build
        displayName: 'Build seismic-cloud-api'
        workingDirectory: api
      - script: |
          go test -v
        workingDirectory: api
        displayName: 'Run unit test seismic-cloud-api'

      - script: |
          pytest integration.py
        workingDirectory: api/tests
        displayName: 'SC-API Integration tests'

      - script: |
          echo 'Deploy'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
        displayName: 'Deploy seismic-cloud'

      - task: PublishTestResults@2
        inputs:
          testRunner: JUnit
          testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
          reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
